// Code generated by "enumer -type Policy -transform lower -text -output policy_gen.go"; DO NOT EDIT.

package schedpolicy

import (
	"fmt"
	"strings"
)

const (
	_PolicyName_0      = "normalfiforrbatch"
	_PolicyLowerName_0 = "normalfiforrbatch"
	_PolicyName_1      = "idledeadline"
	_PolicyLowerName_1 = "idledeadline"
)

var (
	_PolicyIndex_0 = [...]uint8{0, 6, 10, 12, 17}
	_PolicyIndex_1 = [...]uint8{0, 4, 12}
)

func (i Policy) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _PolicyName_0[_PolicyIndex_0[i]:_PolicyIndex_0[i+1]]
	case 5 <= i && i <= 6:
		i -= 5
		return _PolicyName_1[_PolicyIndex_1[i]:_PolicyIndex_1[i+1]]
	default:
		return fmt.Sprintf("Policy(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PolicyNoOp() {
	var x [1]struct{}
	_ = x[Normal-(0)]
	_ = x[FIFO-(1)]
	_ = x[RR-(2)]
	_ = x[Batch-(3)]
	_ = x[Idle-(5)]
	_ = x[Deadline-(6)]
}

var _PolicyValues = []Policy{Normal, FIFO, RR, Batch, Idle, Deadline}

var _PolicyNameToValueMap = map[string]Policy{
	_PolicyName_0[0:6]:        Normal,
	_PolicyLowerName_0[0:6]:   Normal,
	_PolicyName_0[6:10]:       FIFO,
	_PolicyLowerName_0[6:10]:  FIFO,
	_PolicyName_0[10:12]:      RR,
	_PolicyLowerName_0[10:12]: RR,
	_PolicyName_0[12:17]:      Batch,
	_PolicyLowerName_0[12:17]: Batch,
	_PolicyName_1[0:4]:        Idle,
	_PolicyLowerName_1[0:4]:   Idle,
	_PolicyName_1[4:12]:       Deadline,
	_PolicyLowerName_1[4:12]:  Deadline,
}

var _PolicyNames = []string{
	_PolicyName_0[0:6],
	_PolicyName_0[6:10],
	_PolicyName_0[10:12],
	_PolicyName_0[12:17],
	_PolicyName_1[0:4],
	_PolicyName_1[4:12],
}

// PolicyString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PolicyString(s string) (Policy, error) {
	if val, ok := _PolicyNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _PolicyNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Policy values", s)
}

// PolicyValues returns all values of the enum
func PolicyValues() []Policy {
	return _PolicyValues
}

// PolicyStrings returns a slice of all String values of the enum
func PolicyStrings() []string {
	strs := make([]string, len(_PolicyNames))
	copy(strs, _PolicyNames)
	return strs
}

// IsAPolicy returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Policy) IsAPolicy() bool {
	for _, v := range _PolicyValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for Policy
func (i Policy) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Policy
func (i *Policy) UnmarshalText(text []byte) error {
	var err error
	*i, err = PolicyString(string(text))
	return err
}
